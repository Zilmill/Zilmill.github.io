{"pages":[],"posts":[{"title":"Electron 集成 Sqlite3 问题","text":"前言在 Electron 中集成 Sqlite3 时遇到的问题。首先要确认Python的版本对不对，python 指向的必须是 python2.x版本123456789101112# Macbrew install python@2brew link python@2# Windowsscoop bucket add versionsscoop install python27安装node-gyp123456# Windows 执行这句[sudo] npm install --global --production windows-build-tools[sudo] npm install -g node-gyp安装 Sqlite31npm i sqlite3添加electron-builder1npm i -D electron-builder修改package.json ，这个添加的话，在 npm i安装的时候就会自动触发123456...&quot;scripts&quot;: { ... &quot;postinstall&quot;: &quot;electron-builder install-app-deps&quot;, ...}如果不是 npm i 需要手动触发1npm run postinstall全部安装后，需要手动更改文件名称1234567# Macopen node_modules/sqlite3/lib/binding# Windowsstart node_modules/sqlite3/lib/binding删除 node-v64-darwin-x64 文件夹，重命名 electron-v6.0-darwin-x64 为 node-v64-darwin-x64如果编译失败，请检查python 指向的是否是 Python2.x (2.5+)然后就可以直接启动了npm run startSqlite3 必须在主进程中使用，因为有操作本地二进制文件","link":"/articles/4a30.html"},{"title":"Flutter 学习记录-安装（一）","text":"按照官网正常的安装英文官网的安装中文官网的安装Gitbook 的安装篇以下记录安装遇到的问题:本篇仅在Mac环境下遇到的问题，我喜欢用Mac开发，所以Windows未尝试。pod setup失败的解决办法访问 https://github.com/CocoaPods/Specs(如无法克隆，可使用国内镜像https://coding.net/u/hging/p/Specs/git)然后将Specs项目fork到自己的账户上下载GitHub Desktop, 然后clone Specs项目。将clone的Specs项目的文件夹改名为master，然后拖到/Users/用户名/.cocoapods/repos目录下。运行 pod setuppod setup 的本质就是将Github上的Specs项目clone到/Users/用户名/.cocoapods/repos目录下，若此目录下已有Specs项目，则会将项目更新到最新的状态。由于Specs很大，容易导致pod setup失败，这时就需要我们手动安装Specs。若直接从github上下载zip文件，由于缺少git文件，会导致cocoa pods不使用。若用git clone，由于文件过大，容易导致失败。但是使用GitHub Desktop软件，则会提高clone的成功率，并且会给出clone的进度。一直提示develop for ios devices错误解决方法是一次性执行未连接 iOS 设备时的命令，用;分隔。1brew update;brew uninstall --ignore-dependencies libimobiledevice;brew uninstall --ignore-dependencies usbmuxd;brew install --HEAD usbmuxd;brew unlink usbmuxd;brew link usbmuxd;brew install --HEAD libimobiledevice;brew install ideviceinstaller","link":"/articles/25ee.html"},{"title":"Mac iTerm2 漂亮的配置","text":"前言作为一个颜控，经常用的程序必须好看，iTerm2在用了一段时间后，已经不满足原生的界面，然后去找了资源，发现不仅可以变得好看，还可以变得更好用。所以这里记录下，万一换电脑呢😂。一、安装brew1.1 安装1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"1.2 检查是否安装成功1234brew// 如果提示 brew: command not found// 那么接着设置环境变量1.3 设置环境变量12345678open ~/.bash_profile// 在打开的文件中，添加PATH=/usr/local/bin:$PATH// 保存并关闭source ~/.bash_profile // 运行让文件生效// 再次运行尝试1.4 安装cask12brew install brew-cask-completionbrew install caskroom/cask/brew-cask二、安装iTerm21brew cask install iterm2此时已经可以打开iTerm2了，然后继续安装…三、安装插件3.1 安装下载文件命令1brew install wget3.2 安装oh-my-zsh，这个必装，很强大1sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"3.3 安装目录补全12mkdir ~/.oh-my-zsh/plugins/incrwget http://mimosa-pudica.net/src/incr-0.2.zsh -O ~/.oh-my-zsh/plugins/incr/incr.plugin.zsh还有其他的插件，我没装，因为安装完之后就去iTerm的配置中设置我的颜色啊、字体啊什么的了😄，以后再补充。","link":"/articles/16cc.html"},{"title":"Windows 开发环境总结","text":"前言因为某个项目原因，只能在Windows上进行开发和调试，所以万分不情愿的开始弄Windows，在这记录下，以防我又换电脑。准备一种科学上网工具，此过程中，凡是出现错误：如果未开启科学上网，请开启；如果已经开启了全局科学上网，请关闭。用 PowerShell 安装scoop这是个软件管理工具1set-executionpolicy remotesigned -scope currentuser1iex (new-object net.webclient).downloadstring('https://get.scoop.sh')安装成功后，可以运行命令，查看可用命令1scoop help然后执行几个必要的操作安装7zip，所有的软件都依赖这个解压1scoop install 7zip安装git，用来更新scoop1scoop install git更新一下1scoop update展示旧版本1scoop bucket add versions用scoop安装的环境或软件，持续补充…1scoop install nodejs1scoop install python271scoop install ffmpeg1scoop install youtube-dl…其他的1npm install --global --production windows-build-tools1npm i -g node-gyp软件以下下载地址均是网上搜索到的，如有侵权，联系我删除终端 ConEmu代码管理 Github卸载软件 Geek Uninstaller播放器 PotPlayer下载器 IDM垃圾文件清理器 cCleaner快速预览QuickLook Windows编辑工具Notepads类似 Mac 的 Alfred 的快速搜索工具 listary","link":"/articles/ce5b.html"},{"title":"在Mac下尝试Docker","text":"早就知道 Docker 这个东西，直到现在才去了解尝试，还挺好玩的，我决定以后都记下来。Windows 未尝试，应该类似。截止 2020.04.07, 用 Docker 仅仅尝试了端口映射、安装centos启动博客的开发模式，这些都是不需要去做的，仅仅是我为了熟悉 Docker 去做的尝试。安装从这里下载后，直接安装就可以了，安装完后，在命令行中，测试是否成功1docker version常用命令列出安装的所有镜像1docker images列出当前正在运行的所有容器1docker ps -a搜索容器1docker search nginx安装容器1docker pull nginx停止运行1docker stop test删除运行的容器1docker rm -f test删除images1docker rmi nginx添加restart让容器自启动1docker update --restart=always &lt;CONTAINER ID&gt;*CONTAINER ID *通过 docker ps -a查看实际使用Nginx 映射本地前端项目平常写文档用的是 docsify ，类似这种入口文件是 Html 的都需要启动一个本地服务，然后我就发现了可以装个 Nginx 容器，然后映射多个端口，这样就不用每次手动启动了。安装1docker pull nginx检查有没有安装成功1docker images映射网页1docker run -d -p 8081:80 --name doc --volume \"$PWD/Documents/WorkSpace/Doc\":/usr/share/nginx/html nginx8081: 可修改，起到映射多个网页的目的–volume: 用来指定本地文件$PWD: 代表当前目录这时再打开 http://localhost:8081/ 即可。本地搭建服务器docker+centos+hexo+github，打开电脑就可以写博客啦😄。(再此说明下，这不是必须的，有更简单的方法，比如直接在电脑装 pm2 就可以了，仅仅为了学习docker)安装centos1docker pull centos用centos运行一个容器,一定要映射端口，再改的话，用docker commit以当前配置再生成新的images–privileged=true 为了加pm2并且设置开机自启动1docker run -itd --privileged=true -d -p 127.0.0.1:4000:4000 --name blog centos /usr/sbin/init进入容器，这句不能直接复制😯1docker exec -it &lt;CONTAINER ID&gt; /bin/bash安装wget1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh安装 nodejs1wget https://nodejs.org/download/release/latest/node-v13.12.0-linux-x64.tar.gz1tar --strip-components 1 -xzvf node-v* -C /usr/local安装npm1yum -y install npm安装git1yum install git配置git信息1git config --global user.name \"\"1git config --global user.email \"\"拉取代码,在 Github 建立一个 Repositories, 这里会要求输入账号密码，这是本地的，所以不用担心安全问题1git clone https://github.com/Username/test.git部署前，还需要把centos生成的key记录到Github账号里面，不然会部署失败这里一直 Enter 就可以了1ssh-keygen -t rsa1cat /root/.ssh/id_rsa.pub复制整个内容，在这里添加我这里因为已经生成了 hexo 的博客，所以hexo相关知识不在这里记录安装hexo-cli1npm i -g hexo-cli安装依赖1cd test &amp;&amp; npm i安装后台管理，最重要的部分1npm install --save hexo-admin启动1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s这里如果是服务器的话，可以把127.0.0.1 改为 0.0.0.0, hexo clean &amp;&amp; hexo g &amp;&amp; hexo server -i 0.0.0.0部署1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d到这里已经可以了，但是退出 centos，启动的博客就会关掉，所以再加个pm2安装pm21npm i -g pm2用pm2启动命令1pm2 start \"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s\" --name blog设置开机自启动1pm2 save-u root 这个可选，如果运行的结果是pm2-undefined.service那就加上1pm2 startup -u root1systemctl enable pm2-root好了，到这里，可以使用电脑浏览器localhost:4000尝试能否访问了，可以打开这个localhost:4000/admin编辑了。退出centos1exit再加上开机启动。1docker update --restart=always &lt;CONTAINER ID&gt;以后可以打开电脑直接改了。这里提下服务器部署博客的问题默认启动的是0.0.0.0:4000,需要改两个东西阿里或者腾讯的安全组里面，添加一个 0.0.0.0/0 TCP:4000 的规则在服务器安装防火墙管理工具1yum install firewalld允许4000端口1firewall-cmd --add-port=4000/tcp下面说下代码提交到github保存这里也想弄成自动的，或者改下 hexo-admin 插件，加个推送代码，待定，反正自己电脑，很长时间不更新也可以1cd blog/先看下本地有没有改1git status提交前，先拉取,这里也需要输入 Github 用户名密码1git fetch有就拉下1git pull提交1git add .1git commit -m \"update posts\"1git push相关资源菜鸟教程-DockerDocker构建前端应用Docker 快速配置前端开发环境Docker 入门到实践","link":"/articles/7470.html"},{"title":"移动端调试","text":"前言在做混合原生应用、微信公众平台网页时，经常需要在真机中测试，这时查看元素、查看控制台输出就很麻烦，所以需要一个更便捷的工具。尝试过腾讯的vConsole，在用过一段时间后，功能不够丰富，放弃了。再尝试查找其他类似的插件时，发现了Eruda，功能很丰富，不需要安装任何东西，不需要下载js文件引入到项目中，因为它有CDN 😄。在写这个时，再次去查找了资料，发现了spy-debugger，还没尝试去用，这个缺点是每次调试时，都需要手机和电脑同一局域网，并且手机需要更改wifi代理，但是因为是直接用电脑调试，所以在Eruda不满足时，可以尝试下。因为是主要是记录 Eruda，所以以下介绍Eruda的用法，这样就不用打开别的页面去查看用法了，但是要注意 Eruda 是否更新了～介绍Github 提供的 demo按钮拖拽，面板透明度大小设置Console面板：捕获Console日志，支持log、error、info、warn、dir、time/timeEnd、clear、count、assert、table；支持占位符，包括%c自定义样式输出；支持按日志类型及正则表达式过滤；支持快捷命令加载underscore、jQuery库；支持JavaScript脚本执行。Elements面板：查看标签内容及属性；查看应用在Dom上的样式；支持页面元素高亮；支持屏幕直接点击选取；查看Dom上绑定的各类事件。Network面板：捕获请求，查看发送数据、返回头、返回内容等信息。Resources面板：查看并清除localStorage、sessionStorage及cookie；查看页面加载脚本及样式文件；查看页面加载图片。Sources面板：查看页面源码；格式化html，css，js代码及json数据。Info面板：输出URL及User Agent；支持自定义输出内容。Snippets面板：页面元素添加边框；加时间戳刷新页面；支持自定义代码片段。用法第一种：通过CDN使用：12&lt;script src=\"//cdn.bootcss.com/eruda/1.5.2/eruda.min.js\"&gt;&lt;/script&gt;&lt;script&gt;eruda.init();&lt;/script&gt;第二种：在需要调试的页面加入以下脚本：123456(function () { var script = document.createElement('script'); script.src=\"//cdn.jsdelivr.net/npm/eruda\"; document.body.appendChild(script); script.onload = function () { eruda.init() } })();第三种：通过url初始化（推荐）12345678if (/debug/ig.test(location.href)) { (function () { var script = document.createElement('script'); script.src=\"//cdn.jsdelivr.net/npm/eruda\"; document.body.appendChild(script); script.onload = function () { eruda.init() } })(); }初始化123456789// 创建或使用现有的元素let el = document.createElement('div');document.body.appendChild(el);eruda.init({ container: el, // 用于插件初始化的Dom元素，如果不设置，默认创建div作为容器直接置于html根结点下面 tool: ['console', 'elements'], // 指定要初始化哪些面板，默认加载所有 useShadowDom: true});","link":"/articles/ff9d.html"},{"title":"管理员身份运行.bat文件","text":"前言Windows的bat真的很好玩，但是有时候又需要用管理员身份运行，决定有点麻烦，找了些资料，在这记录下，如果发现新方法再更新。123456789101112131415161718192021222324252627282930313233@echo offtitle 获取管理员权限mode con cols=100 lines=20color C:: 开始获取管理员权限setlocalset uac=~uac_permission_tmp_%random%md \"%SystemRoot%\\system32\\%uac%\" 2&gt;nulif %errorlevel%==0 ( rd \"%SystemRoot%\\system32\\%uac%\" &gt;nul 2&gt;nul ) else ( echo set uac = CreateObject^(\"Shell.Application\"^)&gt;\"%temp%\\%uac%.vbs\" echo uac.ShellExecute \"%~s0\",\"\",\"\",\"runas\",1 &gt;&gt;\"%temp%\\%uac%.vbs\" echo WScript.Quit &gt;&gt;\"%temp%\\%uac%.vbs\" \"%temp%\\%uac%.vbs\" /f del /f /q \"%temp%\\%uac%.vbs\" &amp; exit )endlocal:: 完成获取,下面测试添加exe到系统服务中REM echo %0REM echo %~dp0set dpath=%~dp0net stop testservicesc delete testservicesc create testservice start= auto binPath= \"\\\"%dpath%Service.exe\\\" --mod=service\"net start testserviceexit","link":"/articles/744f.html"}],"tags":[{"name":"Electron","slug":"Electron","link":"/tags/Electron/"},{"name":"Sqlite3","slug":"Sqlite3","link":"/tags/Sqlite3/"},{"name":"flutter","slug":"flutter","link":"/tags/flutter/"},{"name":"iTerm","slug":"iTerm","link":"/tags/iTerm/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"效率","slug":"效率","link":"/tags/%E6%95%88%E7%8E%87/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"开发环境","slug":"开发环境","link":"/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"name":"scoop","slug":"scoop","link":"/tags/scoop/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"调试","slug":"调试","link":"/tags/%E8%B0%83%E8%AF%95/"},{"name":"移动端调试","slug":"移动端调试","link":"/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/"},{"name":"bat","slug":"bat","link":"/tags/bat/"},{"name":"管理员运行bat","slug":"管理员运行bat","link":"/tags/%E7%AE%A1%E7%90%86%E5%91%98%E8%BF%90%E8%A1%8Cbat/"},{"name":"自动化","slug":"自动化","link":"/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"}],"categories":[{"name":"Electron","slug":"Electron","link":"/categories/Electron/"},{"name":"Flutter","slug":"Flutter","link":"/categories/Flutter/"},{"name":"Mac","slug":"Mac","link":"/categories/Mac/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"},{"name":"Docker","slug":"Docker","link":"/categories/Docker/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"安装","slug":"Flutter/安装","link":"/categories/Flutter/%E5%AE%89%E8%A3%85/"},{"name":"iTerm2","slug":"Mac/iTerm2","link":"/categories/Mac/iTerm2/"},{"name":"调试","slug":"前端/调试","link":"/categories/%E5%89%8D%E7%AB%AF/%E8%B0%83%E8%AF%95/"},{"name":"mac","slug":"Flutter/安装/mac","link":"/categories/Flutter/%E5%AE%89%E8%A3%85/mac/"},{"name":"自动化","slug":"Windows/自动化","link":"/categories/Windows/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"配置","slug":"Mac/iTerm2/配置","link":"/categories/Mac/iTerm2/%E9%85%8D%E7%BD%AE/"}]}